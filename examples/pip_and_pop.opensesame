# Generated by OpenSesame 0.25-pre11 (Dashy Darwin)
# Sat Nov  5 17:29:21 2011 (posix)
# 
# Copyright Sebastiaan Mathot (2010-2011)
# <http://www.cogsci.nl>
# 
set foreground "white"
set subject_parity "even"
set description "A multisensory integration paradigm based on Van der Burg et al."
set title "Pip & Pop"
set sampler_backend "legacy"
set coordinates "relative"
set height "768"
set mouse_backend "psycho"
set width "1024"
set compensation "0"
set keyboard_backend "psycho"
set background "gray"
set subject_nr "0"
set canvas_backend "psycho"
set start "experiment"
set synth_backend "legacy"

define notepad about_this_template
	__note__
	Hi,
	
	This template already contains the basic structure
	needed for a typical experiment, consisting of a
	practice phase, followed by an experimental phase.
	
	For more information, please refer to the website:
	<http://www.cogsci.nl/opensesame>
	
	Have fun with OpenSesame!
	
	--
	
	Sebastiaan
	__end__
	set description "Some pointers to help you gest started!"

define fixation_dot red_dot
	set foreground "red"
	set style "filled"
	set description "Presents a central fixation dot with a choice of various styles"
	set duration "500"
	set background "gray"
	set y "0"
	set x "0"
	set penwidth "1"

define feedback feedback
	set duration "keypress"
	set reset_variables "yes"
	set description "Provides feedback to the participant"
	draw textline 0 -96 "Your average response time was [avg_rt]ms" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 32 "Press any key to continue" center=1 color=white font_family=mono font_size=18 show_if="always"
	draw textline 0 -32 "Your accuracy was [acc]%" center=1 color=white font_family=mono font_size=18 show_if="always"

define sketchpad end_of_experiment
	set duration "keypress"
	set description "A sketchpad notifying the participant that the experiment is finished"
	set start_response_interval "no"
	draw textline 0 0 "Press any key to exit" center=1 color=white font_family=mono font_size=18 show_if="always"

define sketchpad end_of_practice
	set duration "keypress"
	set description "A sketchpad notifying the participant that the practice phase is finished"
	set start_response_interval "no"
	draw textline 0 0 "Press any key to continue" center=1 color=white font_family=mono font_size=18 show_if="always"

define loop block_loop
	set repeat "3"
	set description "A single block of trials"
	set item "trial_sequence"
	set column_order "correct_response;ori_target;n_dist"
	set cycles "8"
	set order "random"
	setcycle 0 correct_response "slash"
	setcycle 0 n_dist "4"
	setcycle 0 ori_target "0"
	setcycle 1 correct_response "z"
	setcycle 1 n_dist "4"
	setcycle 1 ori_target "90"
	setcycle 2 correct_response "slash"
	setcycle 2 n_dist "9"
	setcycle 2 ori_target "0"
	setcycle 3 correct_response "z"
	setcycle 3 n_dist "9"
	setcycle 3 ori_target "90"
	setcycle 4 correct_response "slash"
	setcycle 4 n_dist "19"
	setcycle 4 ori_target "0"
	setcycle 5 correct_response "z"
	setcycle 5 n_dist "19"
	setcycle 5 ori_target "90"
	setcycle 6 correct_response "slash"
	setcycle 6 n_dist "49"
	setcycle 6 ori_target "0"
	setcycle 7 correct_response "z"
	setcycle 7 n_dist "49"
	setcycle 7 ori_target "90"
	run trial_sequence

define sequence experiment
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run instructions "always"
	run practice_loop "always"
	run end_of_practice "always"
	run experimental_loop "always"
	run end_of_experiment "always"

define loop practice_loop
	set repeat "1"
	set description "A loop containing one or more practice blocks"
	set item "block_sequence"
	set column_order "practice;sound"
	set cycles "1"
	set order "random"
	setcycle 0 sound "yes"
	setcycle 0 practice "yes"
	run block_sequence

define fixation_dot green_dot
	set foreground "green"
	set style "filled"
	set description "Presents a central fixation dot with a choice of various styles"
	set duration "500"
	set background "gray"
	set y "0"
	set x "0"
	set penwidth "1"

define loop experimental_loop
	set repeat "5"
	set description "Repeatedly runs another item"
	set item "block_sequence"
	set column_order "practice;sound"
	set cycles "2"
	set order "random"
	setcycle 0 sound "yes"
	setcycle 0 practice "no"
	setcycle 1 sound "no"
	setcycle 1 practice "no"
	run block_sequence

define reset_feedback reset_feedback

define sequence trial_sequence
	set flush_keyboard "yes"
	set description "A single trial"
	run inline_script "always"
	run green_dot "[correct] = 1"
	run red_dot "[correct] = 0"
	run logger "always"

define inline_script inline_script
	___run__
	from openexp.synth import synth
	from openexp.keyboard import keyboard
	from psychopy.visual import PatchStim
	from random import randint, choice, sample
	from math import sqrt
	
	n_dist = self.get("n_dist") # Nr of distractors
	margin = 100 # Margin from the screen borders
	ori_target = self.get("ori_target") # Orientation of the target
	ori_dist = 30, 60, 120, 150
	min_d = 64
	size = 16, 48
	freq = .03
	speed = 50
	target_chance = 10 # How often is the target selected
	sound = True
	xmin = margin-self.get("width")/2
	xmax = self.get("width")/2-margin
	ymin = margin-self.get("height")/2
	ymax = self.get("height")/2-margin
	colors = "aqua", "orangered"
	
	# Draw and remember the fixation dot
	stim = PatchStim(self.experiment.window, tex=None, mask="circle", pos=(0,0), size=16, color="white")
	fixdot = stim,0,0,None,None
	stim.draw()
	self.experiment.window.flip()
	self.sleep(500)
	
	# Generate a list of orientations and positions
	l_stim = [] # List of all stimuli
	for i in range(n_dist):
	
		# Pick an orientation
		if i == 0:
			ori = ori_target
		else:
			ori = choice(ori_dist)
			
		# Pick a color:
		col = choice(colors)
			
		# Pick an available position on the screen
		redo = True
		while redo:
			x = randint(xmin, xmax)
			y = randint(ymin, ymax)
			redo = False
			for _stim,_x,_y,_ori,_col in l_stim+[fixdot]:
				d = sqrt( (_x-x)**2 + (_y-y)**2 )
				if d < min_d:
					redo = True
					break
		
		# Generate and save the stimulus			
		#stim = PatchStim(self.experiment.window, tex="sin", mask="gauss", pos=(x,y), sf=freq, size=size, ori=ori, color=col)
		stim = PatchStim(self.experiment.window, tex=None, mask="gauss", pos=(x,y), sf=freq, size=size, ori=ori, color=col)
		l_stim.append( (stim,x,y,ori,col) )
		
	my_keyboard = keyboard(self.experiment, timeout=speed)
	my_synth = synth(self.experiment)
	
	sri = self.time()
	while True:
	
		# Swap the color for a random stimulus
		if randint(0, target_chance-1) == 0:
			i = 0
		else:
			i = randint(1,len(l_stim)-1)
		stim, x, y, ori, col = l_stim[i]
		if col == colors[0]:
			col = colors[1]
		else:
			col = colors[0]
		stim.setColor(col)
		l_stim[i] = stim,x,y,ori,col
		
		# Draw all stimuli
		for stim,x,y,ori,col in l_stim+[fixdot]:
			stim.draw()
		# Optionally play a sound if the target has been swapped
		if i == 0 and sound:
			my_synth.play()
		self.experiment.window.flip()	
		
		# Poll the keyboard
		resp, time = my_keyboard.get_key()
		if resp != None:
			break
	
	# Process and log responses
	response = my_keyboard.to_chr(resp)
	response_time = time-sri
	if response == self.get("correct_response"):
		correct = 1
	else:
		correct = 0
	self.experiment.set("response", response)
	self.experiment.set("response_time", response_time)
	self.experiment.set("correct", correct)
	
	# Maintain feedback data
	self.experiment.total_response_time += response_time
	self.experiment.total_responses += 1
	self.experiment.total_correct += correct
	self.experiment.acc = 100.0 * self.experiment.total_correct / self.experiment.total_responses
	self.experiment.avg_rt = self.experiment.total_response_time / self.experiment.total_responses
	__end__
	set _prepare ""
	set description "Executes Python code"

define sketchpad instructions
	set duration "keypress"
	set start_response_interval "no"
	set description "A sketchpad containing the instructions for the participant"
	draw textline 0 0 "Press any key to begin!" center=1 color=white font_family=mono font_size=18 show_if="always"

define logger logger
	set description "Logs experimental data"

define sequence block_sequence
	set flush_keyboard "yes"
	set description "A sequence containging a single block of trials followed by feedback to the participant"
	run reset_feedback "always"
	run block_loop "always"
	run feedback "always"

