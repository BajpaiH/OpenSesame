# Generated by OpenSesame
# Fri Dec  3 16:33:42 2010
# 
# Copyright Sebastiaan Mathot (2010)
# <http://www.cogsci.nl>

set foreground "white"
set description "Default description"
set title "Default template"
set coordinates "relative"
set height "768"
set width "1024"
set compensation "0"
set background "black"
set start "experiment"

define inline_script inline_script
	__prepare__
	# Import the appropriate modules from OpenExp
	import openexp.synth
	import openexp.canvas
	
	# Create a list of notes. We only use 'whole' notes (i.e., no flats and sharps)
	self.notes = ["a", "b", "c", "d", "e", "f", "g"]
	self.soundbank = {}
	
	# Fill a soundbank with generated sounds for each note. This works
	# because the synthesizer accepts frequencies in the form of
	# A1, a#1, etc., in addition to simple frequencies in Hz
	for note in self.notes:
		self.soundbank[note] = openexp.synth.synth("sine", "%s1" % note)
	
	# Create a canvas to show while a note is playing
	self.c_play = self.offline_canvas()
	self.c_play.text("Playing")
	
	# Create a canvas to play while silent
	self.c_stop = self.offline_canvas()
	self.c_stop.text("Not playing (press 'Q' to quit)")
	
	
	
	
	
	
	
	__end__
	__run__
	# Import the response module to collect keyboard responses
	import openexp.response
	
	# Enter an infinite loop, which is broken when the user
	# presses 'q'. Note that pressing escape raises an exception,
	# so escape also quits the experiment.
	while True:
	
		# Get a response
		time, key= openexp.response.get_key()
	
		# Convert the response into readable form (.e.g, 'a' for the key A)
		note = openexp.response.key_name(key)
	
		# Quit if the Q is pressed
		if note == 'q':
			break
	
		# If the pressed key is in the range A to G
		if note in self.notes:
	
			# Show the play canvas
			self.c_play.show()
	
			# Play the note
			# Passing True makes the function wait until the note is finished
			start_time = self.time()
			self.soundbank[note].play(True)
			end_time = self.time()
	
			# Log the the timing error
			time_error = 100 - end_time + start_time
			self.log("Error = %d" % time_error)
	
			# Show the not playing canvas
			self.c_stop.show()
	
	
	
	
	
	
	
	__end__

define sequence experiment
	run welcome "always"
	run inline_script "always"

define sketchpad welcome
	set duration "0"
	set start_response_interval "no"
	draw textline 0 0 "Press keys (A - G) to play notes and Q to exit ..." center=1 color=white font_family=mono font_size=18

