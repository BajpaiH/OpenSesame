# Generated by OpenSesame
# Tue Nov 30 12:26:37 2010
# 
# Copyright Sebastiaan Mathot (2010)
# <http://www.cogsci.nl>

set foreground "white"
set description "If you follow the tutorial you should get something like this!"
set title "Tutorial experiment"
set coordinates "relative"
set height "768"
set width "1024"
set compensation "0"
set background "black"
set start "Experiment"

define loop experimental_phase
	set item "experimental_sequence"
	set cycles "1"
	set order "random"
	set repeat "8"
	setcycle 0 practice "no"
	run experimental_sequence

define feedback feedback
	set duration "keypress"
	draw textline 0 -32 "Your average response time was [avg_rt] ms" center=1 color=white font_family=mono font_size=18
	draw textline 0 32 "Your accuracy was [acc]%" center=1 color=white font_family=mono font_size=18
	draw textline 0 96 "Press any key to continue ..." center=1 color=white font_family=mono font_size=18
	draw textline 0 -96 "End of block!" center=1 color=white font_family=mono font_size=18

define inline_script stimuli
	__prepare__
	# This example shows how to create offline canvasses
	# using inline code. For a list of all canvas functions, see
	# <http://files.cogsci.nl/software/opensesame/doc/openexp/openexp.canvas.html>
	#
	# PREPARE vs RUN
	# The prepare phase is called before a sequence (e.g., a trial) is started.
	# This allows you to create canvasses in advance. In the run phase you simply
	# show the canvasses that you have created during the prepape phase, leading
	# to more accurate timing. In this example, we could have done everything
	# in the run phase, but it's good practice to use the prepare phase for
	# preparatory stuff.
	#
	# ABOUT "self.get()", "self.set()" and "self.experiment.set()"
	# You can retrieve variables using value = self.get("varname"). You should
	# store variables using self.experiment.set("varname", value). If you use
	# self.set("varname", value) instead, the variable will not be accessible from
	# other items, such as a logger or another inline_script.
	#
	# ABOUT "self."
	# By prepending "self." to a variable name, you attach it to the current object.
	# This way the variable is preserved. If we were to define a canvas like
	# "c = self.offline_canvas()" instead of "self.c = self.offline_canvas()",
	# we wouldn't be able to use it in the run phase.
	#
	# For more information about "self." and classes see
	# <http://docs.python.org/tutorial/classes.html>
	
	# Create the fixation dot canvas
	self.c_fixdot = self.offline_canvas()
	self.c_fixdot.fixdot()
	
	# Create the cue canvas
	self.c_cue = self.offline_canvas()
	
	# Copy the contents of the fixdot canvas
	self.c_cue.copy(self.c_fixdot)
	
	# Draw the cue, based on the cue variable
	if self.get("cue") == "left":
		# From right (30, 0) to left (-30, 0)
		self.c_cue.arrow(self.c_cue.xcenter() + 64, self.c_cue.ycenter(), self.c_cue.xcenter() - 64, self.c_cue.ycenter())
	else:
		# From left (-30, 0) to right (30, 0)
		self.c_cue.arrow(self.c_cue.xcenter() - 64, self.c_cue.ycenter(), self.c_cue.xcenter() + 64, self.c_cue.ycenter())	
	
	# Create the target canvas
	self.c_target = self.offline_canvas()
	
	# Copy the contents of the fixdot canvas
	self.c_target.copy(self.c_fixdot)
	
	# Draw the target based on the target variable
	if self.get("target") == "left":
		# A filled circle on the left with radius 64
		self.c_target.circle(self.c_cue.xcenter() - 288, self.c_cue.ycenter(), 64, True)
	else:
		# A filled circle on the right with radius 64
		self.c_target.circle(self.c_cue.xcenter() + 288, self.c_cue.ycenter(), 64, True)
	
	
	__end__
	__run__
	# Simply show the canvasses and
	# wait for 100ms inbetween the
	# presentation of each canvas.
	
	self.c_fixdot.show()
	self.sleep(100)
	
	self.c_cue.show()
	self.sleep(100)
	
	self.c_fixdot.show()
	self.sleep(100)
	
	# openexp.canvas.show() returns the time at which
	# the canvas was flipped to the screen. In this case,
	# we use this to indicate the start of the response
	# interval. "start_response_interval" is a special 
	# variable, which is automatically used by keyboard_response
	# and mouse_response items.
	
	time = self.c_target.show()
	self.experiment.set("start_response_interval", time)
	self.sleep(100)
	
	self.c_fixdot.show()
	
	__end__

define sketchpad Welcome
	set duration "keypress"
	set start_response_interval "no"
	draw textline 0 -64 "Press 'z' if the circle appears on the left" center=1 color=white font_family=mono font_size=18
	draw textline 0 -32 "Press '/' if the circle appears on the right" center=1 color=white font_family=mono font_size=18
	draw textline 0 32 "Press any key to start with the practice phase ..." center=1 color=white font_family=mono font_size=18
	draw rect -448 -320 896 640 fill=0 penwidth=4 color=orange

define sketchpad end_of_practice
	set duration "keypress"
	set start_response_interval "no"
	draw textline 0 -32 "The practice phase is finished!" center=1 color=white font_family=mono font_size=18
	draw textline 0 32 "Press any key to start the 'real' experiment ..." center=1 color=white font_family=mono font_size=18
	draw rect -448 -320 896 640 fill=0 penwidth=4 color=green

define loop practice_phase
	set item "sequence"
	set cycles "2"
	set order "random"
	set repeat "1"
	setcycle 0 practice "yes"
	setcycle 1 practice "yes"
	run practice_sequence

define logger log_response
	log "response"
	log "response_time"
	log "correct"
	log "target"
	log "cue"
	log "practice"

define sequence trial
	run stimuli "always"
	run get_response "always"
	run log_response "always"

define sequence Experiment
	run Welcome "always"
	run practice_phase "always"
	run end_of_practice "always"
	run experimental_phase "always"
	run goodbye "always"

define sketchpad goodbye
	set duration "1000"
	set start_response_interval "no"
	draw textline 0 -32 "That's it, thank you for participating!" center=1 color=white font_family=mono font_size=18
	draw textline 0 32 "Press any key to exit ..." center=1 color=white font_family=mono font_size=18
	draw rect -448 -320 896 640 fill=0 penwidth=4 color=blue

define sequence practice_sequence
	run block "always"
	run feedback "always"

define keyboard_response get_response
	set allowed_responses "z;/"

define sequence experimental_sequence
	run block "always"
	run feedback "always"

define loop block
	set item "trial"
	set cycles "4"
	set order "random"
	set repeat "2"
	setcycle 0 correct_response "z"
	setcycle 0 cue "left"
	setcycle 0 target "left"
	setcycle 1 correct_response "z"
	setcycle 1 cue "right"
	setcycle 1 target "left"
	setcycle 2 correct_response "/"
	setcycle 2 cue "left"
	setcycle 2 target "right"
	setcycle 3 correct_response "/"
	setcycle 3 cue "right"
	setcycle 3 target "right"
	run trial

